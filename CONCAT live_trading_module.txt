# Module: live_trading_module

# File: components/live_trading_module/alpaca_store_streamer.py
# Type: py

# components/live_trading_module/alpaca_store_streamer.py

import time
import logging

class AlpacaStoreStreamerMock:
    """
    Sprint 3:
    Mock streamer to simulate AlpacaStore.
    For demonstration, let's say it always raises an exception to force fallback.
    In a real scenario, this would connect to Alpaca Live Stream.
    """
    def __init__(self, symbols):
        self.logger = logging.getLogger("AlpacaStoreStreamerMock")
        self.symbols = symbols
        self._running = False

    def start(self):
        self.logger.info("Attempting to start AlpacaStoreStreamerMock...")
        time.sleep(2)
        # Simulate failure
        raise RuntimeError("AlpacaStore connection failed")

    def stop(self):
        if self._running:
            self._running = False
            self.logger.info("Stopped AlpacaStoreStreamerMock")


# File: components/live_trading_module/live_trading_db.py
# Type: py

# components/live_trading_module/live_trading_db.py

import sqlite3
from pathlib import Path
from datetime import datetime
import logging
from components.data_management_module.config import config

logger = logging.getLogger(__name__)

class LiveTradingDB:
    """
    Sprint 4:
    - Already have tables: live_prices, account_equity, live_trades.
    - Add indexes for better performance.
    - Confirmed schema stability.
    """

    def __init__(self):
        self.db_path = Path(config.get('DEFAULT', 'live_trading_database_path'))
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self._init_db()

    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
            CREATE TABLE IF NOT EXISTS live_prices (
                symbol TEXT,
                timestamp DATETIME,
                open REAL,
                high REAL,
                low REAL,
                close REAL,
                volume INTEGER,
                PRIMARY KEY (symbol, timestamp)
            ) WITHOUT ROWID;            
            """)
            conn.execute("""
            CREATE TABLE IF NOT EXISTS account_equity (
                timestamp DATETIME PRIMARY KEY,
                equity REAL
            ) WITHOUT ROWID;
            """)
            conn.execute("""
            CREATE TABLE IF NOT EXISTS live_trades (
                strategy_name TEXT,
                timestamp DATETIME,
                symbol TEXT,
                side TEXT,
                qty INTEGER,
                price REAL,
                PRIMARY KEY (strategy_name, timestamp, symbol)
            ) WITHOUT ROWID;
            """)

            # Add indexes for better query performance
            conn.execute("CREATE INDEX IF NOT EXISTS idx_live_prices_symbol ON live_prices (symbol);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_live_prices_timestamp ON live_prices (timestamp);")

            conn.execute("CREATE INDEX IF NOT EXISTS idx_live_trades_strategy ON live_trades (strategy_name);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_live_trades_symbol ON live_trades (symbol);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_live_trades_timestamp ON live_trades (timestamp);")


    def save_market_data_point(self, symbol, timestamp, o, h, l, c, v):
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                INSERT OR IGNORE INTO live_prices (symbol, timestamp, open, high, low, close, volume)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (symbol, timestamp.isoformat(), o, h, l, c, v))
                # Consider running ANALYZE after many inserts or periodically
                # For simplicity, no frequent ANALYZE here. If needed, we can add a counter.
        except Exception as e:
            logger.error(f"Error saving market data point: {str(e)}")

    def save_account_equity(self, timestamp, equity):
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                INSERT OR REPLACE INTO account_equity (timestamp, equity)
                VALUES (?, ?)
                """, (timestamp.isoformat(), equity))
        except Exception as e:
            logger.error(f"Error saving account equity: {str(e)}")

    def save_trade(self, strategy_name, timestamp, symbol, side, qty, price):
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                INSERT OR IGNORE INTO live_trades (strategy_name, timestamp, symbol, side, qty, price)
                VALUES (?, ?, ?, ?, ?, ?)
                """, (strategy_name, timestamp.isoformat(), symbol, side, qty, price))
        except Exception as e:
            logger.error(f"Error saving trade: {str(e)}")
    # Optional helper methods for debugging or data retrieval (not required but helpful)
    def get_latest_price(self, symbol):
        try:
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("""
                SELECT * FROM live_prices
                WHERE symbol = ?
                ORDER BY timestamp DESC
                LIMIT 1
                """, (symbol,))
                row = cur.fetchone()
                return row
        except Exception as e:
            logger.error(f"Error retrieving latest price for {symbol}: {str(e)}")
            return None



# File: components/live_trading_module/live_trading_manager.py
# Type: py

# components/live_trading_module/live_trading_manager.py

import logging
import threading
from datetime import datetime
import pytz

from components.data_management_module.config import UnifiedConfigLoader, config
from .alpaca_store_streamer import AlpacaStoreStreamerMock
from .zeromq_price_streamer import ZeroMQPriceStreamer
from .live_trading_db import LiveTradingDB

class LiveTradingManager:
    """
    SPRINT 3:
    Attempts to connect to AlpacaStoreStreamerMock if use_alpaca_store = True.
    If it fails, fallback to ZeroMQPriceStreamer.

    Also saves incoming market data to live_trading_data.db via LiveTradingDB.
    """

    def __init__(self, strategy_name):
        self.logger = logging.getLogger('LiveTradingManager')
        self.strategy_name = strategy_name
        self.use_alpaca = UnifiedConfigLoader.use_alpaca_store()
        self.symbols = self._load_symbols()  # In a real scenario, strategies have defined symbols
        self.db = LiveTradingDB()
        self._running = False

    def _load_symbols(self):
        # For demonstration, let's pick all tickers from global config or just one
        tickers_file = config.get('DEFAULT', 'tickers_file')
        with open(tickers_file, 'r') as f:
            symbols = [line.strip() for line in f if line.strip()]
        return symbols

    def start(self):
        self._running = True
        if self.use_alpaca:
            self.logger.info(f"LiveTradingManager for {self.strategy_name}: Trying AlpacaStoreStreamerMock first...")
            try:
                alpaca_streamer = AlpacaStoreStreamerMock(self.symbols)
                alpaca_streamer.start()
                # If no exception, we got alpaca feed running (in real scenario)
                # Let's say in mock it always fails, so we never reach here.
            except Exception as e:
                self.logger.warning(f"AlpacaStore failed: {str(e)}, falling back to ZeroMQ")
                self._start_zeromq_fallback()
        else:
            self.logger.info(f"LiveTradingManager for {self.strategy_name}: Alpaca store not enabled. Using ZeroMQ fallback directly.")
            self._start_zeromq_fallback()

    def _start_zeromq_fallback(self):
        # Use ZeroMQPriceStreamer
        topic = config.get('DEFAULT', 'zeromq_topic')
        port = config.get('DEFAULT', 'zeromq_port')
        self.zeromq_streamer = ZeroMQPriceStreamer(topic, port)
        self.thread = threading.Thread(target=self.zeromq_streamer.start, args=(self._on_market_data,), daemon=True)
        self.thread.start()
        self.logger.info(f"LiveTradingManager for {self.strategy_name}: ZeroMQ fallback live data started")


    def _on_market_data(self, symbol, timestamp, o, h, l, c, v):
        # Save to live_trading_data.db
        self.db.save_market_data_point(symbol, timestamp, o, h, l, c, v)
        # In real scenario, also run live strategy logic here (not implemented)
        # Additional logic for live strategy would go here
        # Could add logs for each data point, but that might be too verbose. Let's trust this minimal logging.

    def stop(self):
        self._running = False
        if hasattr(self, 'zeromq_streamer'):
            self.zeromq_streamer.stop()
        self.logger.info(f"LiveTradingManager for {self.strategy_name} stopped")



# File: components/live_trading_module/zeromq_price_streamer.py
# Type: py

# components/live_trading_module/zeromq_price_streamer.py

import zmq
import json
import logging
from datetime import datetime
import pytz
import time

class ZeroMQPriceStreamer:
    """
    Sprint 3:
    Subscribes to the ZeroMQ publisher from real_time_data.py.
    This acts as fallback if AlpacaStoreStreamer fails.
    """

    def __init__(self, topic, port):
        self.logger = logging.getLogger("ZeroMQPriceStreamer")
        self.topic = topic
        self.port = port
        self.zmq_context = zmq.Context()
        self.subscriber = self.zmq_context.socket(zmq.SUB)
        self.subscriber.setsockopt_string(zmq.SUBSCRIBE, self.topic)
        connect_str = f"tcp://localhost:{self.port}"
        self.subscriber.connect(connect_str)
        self._running = False

    def start(self, callback):
        """
        callback: a function to call with received data
        callback signature: callback(symbol, timestamp, open, high, low, close, volume)
        """
        self._running = True
        self.logger.info("ZeroMQPriceStreamer started")
        while self._running:
            try:
                msg = self.subscriber.recv_string(flags=zmq.NOBLOCK)
                if msg:
                    # msg format: "topic {json}"
                    # example: "market_data.AAPL { ... }"
                    parts = msg.split(' ', 1)
                    if len(parts) == 2:
                        # parse json
                        data = json.loads(parts[1])
                        symbol = data['symbol']
                        ts = datetime.fromisoformat(data['timestamp'])
                        o = data['open']
                        h = data['high']
                        l = data['low']
                        c = data['close']
                        v = data['volume']
                        callback(symbol, ts, o, h, l, c, v)
            except zmq.Again:
                # no message yet
                time.sleep(0.5)
            except Exception as e:
                self.logger.error(f"Error in ZeroMQPriceStreamer: {str(e)}")
                time.sleep(1)

    def stop(self):
        self._running = False
        self.subscriber.close()
        self.zmq_context.term()
        self.logger.info("ZeroMQPriceStreamer stopped")


