# Module: strategy_management_module

# File: components/strategy_management_module/__init__.py
# Type: py

# File: components/strategy_management_module/__init__.py
"""
Strategy Management Module - Handles trading strategy configuration and execution
"""
from .strategies.strategy_base import StrategyBase

# File: components/strategy_management_module/config.py
# Type: py

# File: components/strategy_management_module/config.py
"""
Changes:
- Added configuration constants for strategies
- Added type hints and docstring
"""
"""
Configuration settings for the Strategy Management Module
"""
# Default settings for strategies
STRATEGY_SETTINGS = {
    'default_allocation': 5000,  # Default capital allocation per strategy
    'max_active_strategies': 5,  # Maximum number of concurrent active strategies
    'validation_thresholds': {
        'min_sharpe_ratio': 0.5,
        'max_drawdown': -0.2
    }
}

# File: components/strategy_management_module/strategy_manager.py
# Type: py

# components/backtesting_module/parameter_validator.py

import logging
from typing import Dict, Any, List

# components/backtesting_module/parameter_validator.py

class ParameterValidator:
    """
    Validates strategy parameters and enforces optimization limits
    """
    # Default parameter ranges aligned with documentation
    DEFAULT_RANGES = {
        'MovingAverageCrossover': {
            'short_window': {'min': 5, 'max': 15, 'step': 1},  # Documentation specifies smaller range
            'long_window': {'min': 10, 'max': 20, 'step': 1}   # Documentation specifies smaller range
        },
        'RSIStrategy': {
            'rsi_period': {'min': 5, 'max': 30, 'step': 5},
            'oversold': {'min': 20, 'max': 40, 'step': 5},
            'overbought': {'min': 60, 'max': 80, 'step': 5}
        },
        'MACDStrategy': {
            'fast_period': {'min': 12, 'max': 16, 'step': 1},
            'slow_period': {'min': 26, 'max': 30, 'step': 1},
            'signal_period': {'min': 9, 'max': 12, 'step': 1}
        },
        'BollingerBandsStrategy': {
            'window': {'min': 20, 'max': 30, 'step': 5},
            'num_std': {'min': 2, 'max': 3, 'step': 0.5}
        }
    }
       
    @staticmethod
    def validate_parameters(strategy_name: str, params: Dict[str, Any]) -> bool:
        """
        Validates that parameters are within acceptable ranges
        """
        if strategy_name not in ParameterValidator.DEFAULT_RANGES:
            logging.warning(f"No validation rules for strategy: {strategy_name}")
            return True
            
        ranges = ParameterValidator.DEFAULT_RANGES[strategy_name]
        for param, value in params.items():
            if param in ranges:
                if value < ranges[param]['min'] or value > ranges[param]['max']:
                    raise ValueError(
                        f"Parameter {param} value {value} outside valid range "
                        f"({ranges[param]['min']}-{ranges[param]['max']})"
                    )
        return True

    @staticmethod
    def generate_grid_parameters(strategy_name: str) -> Dict[str, List[float]]:
        """
        Generates parameter combinations for grid search within safe limits
        """
        if strategy_name not in ParameterValidator.DEFAULT_RANGES:
            raise ValueError(f"No grid search parameters defined for {strategy_name}")
            
        ranges = ParameterValidator.DEFAULT_RANGES[strategy_name]
        grid_params = {}
        
        for param, range_info in ranges.items():
            values = list(range(
                range_info['min'],
                range_info['max'] + range_info['step'],
                range_info['step']
            ))
            grid_params[param] = values
            
        return grid_params

# File: components/strategy_management_module/strategies/__init__.py
# Type: py

# File: components/strategy_management_module/strategies/__init__.py
from .strategy_base import StrategyBase

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class BollingerBandsStrategy(StrategyBase):
    """Bollinger Bands Strategy."""

    default_params = {
        'window': 20,
        'num_std': 2
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        window = self.params.get('window')
        num_std = self.params.get('num_std')

        if not isinstance(window, int) or window <= 0:
            raise ValueError("window must be a positive integer")
        if not isinstance(num_std, (int, float)) or num_std <= 0:
            raise ValueError("num_std must be a positive number")

    def generate_signals(self, data):
        """Generate trading signals."""
        rolling_mean = data['close'].rolling(window=self.params['window']).mean()
        rolling_std = data['close'].rolling(window=self.params['window']).std()
        
        upper_band = rolling_mean + (rolling_std * self.params['num_std'])
        lower_band = rolling_mean - (rolling_std * self.params['num_std'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = ((data['close'] <= lower_band).astype(float) - 
                           (data['close'] >= upper_band).astype(float))
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/macd_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/macd_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MACDStrategy(StrategyBase):
    """Moving Average Convergence Divergence (MACD) Strategy."""

    default_params = {
        'fast_period': 12,
        'slow_period': 26,
        'signal_period': 9
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        fast_period = self.params.get('fast_period')
        slow_period = self.params.get('slow_period')
        signal_period = self.params.get('signal_period')

        if not all(isinstance(x, int) and x > 0 
                  for x in [fast_period, slow_period, signal_period]):
            raise ValueError("All periods must be positive integers")
        if fast_period >= slow_period:
            raise ValueError("fast_period must be less than slow_period")

    def generate_signals(self, data):
        """Generate trading signals."""
        exp1 = data['close'].ewm(span=self.params['fast_period'], 
                                adjust=False).mean()
        exp2 = data['close'].ewm(span=self.params['slow_period'], 
                                adjust=False).mean()
        macd = exp1 - exp2
        signal_line = macd.ewm(span=self.params['signal_period'], 
                              adjust=False).mean()
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (macd > signal_line).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/momentum_stratey.py
# Type: py

# File: components/strategy_management_module/strategies/momentum_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MomentumStrategy(StrategyBase):
    """Simple Momentum Strategy."""

    default_params = {
        'lookback_period': 20,
        'threshold': 0
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        lookback_period = self.params.get('lookback_period')
        threshold = self.params.get('threshold')

        if not isinstance(lookback_period, int) or lookback_period <= 0:
            raise ValueError("lookback_period must be a positive integer")
        if not isinstance(threshold, (int, float)):
            raise ValueError("threshold must be a number")

    def generate_signals(self, data):
        """Generate trading signals."""
        momentum = data['close'].pct_change(periods=self.params['lookback_period'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (momentum > self.params['threshold']).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/moving_average_crossover.py
# Type: py

# File: components/strategy_management_module/strategies/moving_average_crossover.py
"""
Changes:
- Added proper type hints
- Improved validation
- Added logging
- Added signal generation error handling
"""
import logging
import pandas as pd
import numpy as np
from typing import Dict
from .strategy_base import StrategyBase

class MovingAverageCrossoverStrategy(StrategyBase):
    """Moving Average Crossover trading strategy."""

    default_params = {
        'short_window': 40,
        'long_window': 100
    }

    def __init__(self, params: Dict = None):
        self.logger = logging.getLogger(__name__)
        super().__init__(params or self.default_params)

    def validate_params(self) -> None:
        """Validate strategy parameters."""
        short_window = self.params.get('short_window')
        long_window = self.params.get('long_window')

        if not all(isinstance(x, int) and x > 0 
                  for x in [short_window, long_window]):
            raise ValueError("Windows must be positive integers")
        if short_window >= long_window:
            raise ValueError("short_window must be less than long_window")

    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """Generate trading signals based on moving average crossover."""
        try:
            signals = pd.DataFrame(index=data.index)
            signals['signal'] = 0.0

            # Calculate moving averages
            signals['short_mavg'] = data['close'].rolling(
                window=self.params['short_window'], 
                min_periods=1).mean()
            signals['long_mavg'] = data['close'].rolling(
                window=self.params['long_window'], 
                min_periods=1).mean()

            # Generate signals using loc to avoid chained assignment warning
            signals.loc[signals.index, 'signal'] = np.where(
                signals['short_mavg'] > signals['long_mavg'], 1.0, 0.0)
            signals['positions'] = signals['signal'].diff()

            return signals
        except Exception as e:
            self.logger.error(f"Error generating signals: {e}")
            raise

# File: components/strategy_management_module/strategies/rsi_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/rsi_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class RSIStrategy(StrategyBase):
    """Relative Strength Index (RSI) Strategy."""

    default_params = {
        'period': 14,
        'overbought': 70,
        'oversold': 30
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        period = self.params.get('period')
        overbought = self.params.get('overbought')
        oversold = self.params.get('oversold')

        if not isinstance(period, int) or period <= 0:
            raise ValueError("period must be a positive integer")
        if not (0 < oversold < overbought < 100):
            raise ValueError("Invalid overbought/oversold levels")

    def generate_signals(self, data):
        """Generate trading signals."""
        delta = data['close'].diff()
        gain = delta.where(delta > 0, 0).fillna(0)
        loss = (-delta.where(delta < 0, 0)).fillna(0)
        
        avg_gain = gain.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        avg_loss = loss.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))

        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals.loc[rsi > self.params['overbought'], 'signal'] = -1.0  # Fixed chained assignment
        signals.loc[rsi < self.params['oversold'], 'signal'] = 1.0     # Fixed chained assignment
        signals['positions'] = signals['signal'].diff()

        return signals

# File: components/strategy_management_module/strategies/strategy_base.py
# Type: py

# File: components/strategy_management_module/strategies/strategy_base.py
from abc import ABC, abstractmethod
from typing import Dict
import pandas as pd

class StrategyBase(ABC):
    """Base class for all trading strategies."""

    def __init__(self, params: Dict):
        """
        Initialize strategy with parameters.
        
        Args:
            params: Strategy parameters
        """
        self.params = params
        self.validate_params()

    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals from market data.
        
        Args:
            data: Market data with OHLCV columns
            
        Returns:
            DataFrame with trading signals
        """
        pass

    @abstractmethod
    def validate_params(self) -> None:
        """
        Validate strategy parameters.
        
        Raises:
            ValueError: If parameters are invalid
        """
        pass


# Module: strategy_management_module

# File: components/strategy_management_module/__init__.py
# Type: py

# File: components/strategy_management_module/__init__.py
"""
Strategy Management Module - Handles trading strategy configuration and execution
"""
from .strategies.strategy_base import StrategyBase

# File: components/strategy_management_module/config.py
# Type: py

# File: components/strategy_management_module/config.py
"""
Changes:
- Added configuration constants for strategies
- Added type hints and docstring
"""
"""
Configuration settings for the Strategy Management Module
"""
# Default settings for strategies
STRATEGY_SETTINGS = {
    'default_allocation': 5000,  # Default capital allocation per strategy
    'max_active_strategies': 5,  # Maximum number of concurrent active strategies
    'validation_thresholds': {
        'min_sharpe_ratio': 0.5,
        'max_drawdown': -0.2
    }
}

# File: components/strategy_management_module/strategy_manager.py
# Type: py

# components/backtesting_module/parameter_validator.py

import logging
from typing import Dict, Any, List

# components/backtesting_module/parameter_validator.py

class ParameterValidator:
    """
    Validates strategy parameters and enforces optimization limits
    """
    # Default parameter ranges aligned with documentation
    DEFAULT_RANGES = {
        'MovingAverageCrossover': {
            'short_window': {'min': 5, 'max': 15, 'step': 1},  # Documentation specifies smaller range
            'long_window': {'min': 10, 'max': 20, 'step': 1}   # Documentation specifies smaller range
        },
        'RSIStrategy': {
            'rsi_period': {'min': 5, 'max': 30, 'step': 5},
            'oversold': {'min': 20, 'max': 40, 'step': 5},
            'overbought': {'min': 60, 'max': 80, 'step': 5}
        },
        'MACDStrategy': {
            'fast_period': {'min': 12, 'max': 16, 'step': 1},
            'slow_period': {'min': 26, 'max': 30, 'step': 1},
            'signal_period': {'min': 9, 'max': 12, 'step': 1}
        },
        'BollingerBandsStrategy': {
            'window': {'min': 20, 'max': 30, 'step': 5},
            'num_std': {'min': 2, 'max': 3, 'step': 0.5}
        }
    }
       
    @staticmethod
    def validate_parameters(strategy_name: str, params: Dict[str, Any]) -> bool:
        """
        Validates that parameters are within acceptable ranges
        """
        if strategy_name not in ParameterValidator.DEFAULT_RANGES:
            logging.warning(f"No validation rules for strategy: {strategy_name}")
            return True
            
        ranges = ParameterValidator.DEFAULT_RANGES[strategy_name]
        for param, value in params.items():
            if param in ranges:
                if value < ranges[param]['min'] or value > ranges[param]['max']:
                    raise ValueError(
                        f"Parameter {param} value {value} outside valid range "
                        f"({ranges[param]['min']}-{ranges[param]['max']})"
                    )
        return True

    @staticmethod
    def generate_grid_parameters(strategy_name: str) -> Dict[str, List[float]]:
        """
        Generates parameter combinations for grid search within safe limits
        """
        if strategy_name not in ParameterValidator.DEFAULT_RANGES:
            raise ValueError(f"No grid search parameters defined for {strategy_name}")
            
        ranges = ParameterValidator.DEFAULT_RANGES[strategy_name]
        grid_params = {}
        
        for param, range_info in ranges.items():
            values = list(range(
                range_info['min'],
                range_info['max'] + range_info['step'],
                range_info['step']
            ))
            grid_params[param] = values
            
        return grid_params

# File: components/strategy_management_module/strategies/__init__.py
# Type: py

# File: components/strategy_management_module/strategies/__init__.py
from .strategy_base import StrategyBase

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class BollingerBandsStrategy(StrategyBase):
    """Bollinger Bands Strategy."""

    default_params = {
        'window': 20,
        'num_std': 2
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        window = self.params.get('window')
        num_std = self.params.get('num_std')

        if not isinstance(window, int) or window <= 0:
            raise ValueError("window must be a positive integer")
        if not isinstance(num_std, (int, float)) or num_std <= 0:
            raise ValueError("num_std must be a positive number")

    def generate_signals(self, data):
        """Generate trading signals."""
        rolling_mean = data['close'].rolling(window=self.params['window']).mean()
        rolling_std = data['close'].rolling(window=self.params['window']).std()
        
        upper_band = rolling_mean + (rolling_std * self.params['num_std'])
        lower_band = rolling_mean - (rolling_std * self.params['num_std'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = ((data['close'] <= lower_band).astype(float) - 
                           (data['close'] >= upper_band).astype(float))
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/macd_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/macd_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MACDStrategy(StrategyBase):
    """Moving Average Convergence Divergence (MACD) Strategy."""

    default_params = {
        'fast_period': 12,
        'slow_period': 26,
        'signal_period': 9
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        fast_period = self.params.get('fast_period')
        slow_period = self.params.get('slow_period')
        signal_period = self.params.get('signal_period')

        if not all(isinstance(x, int) and x > 0 
                  for x in [fast_period, slow_period, signal_period]):
            raise ValueError("All periods must be positive integers")
        if fast_period >= slow_period:
            raise ValueError("fast_period must be less than slow_period")

    def generate_signals(self, data):
        """Generate trading signals."""
        exp1 = data['close'].ewm(span=self.params['fast_period'], 
                                adjust=False).mean()
        exp2 = data['close'].ewm(span=self.params['slow_period'], 
                                adjust=False).mean()
        macd = exp1 - exp2
        signal_line = macd.ewm(span=self.params['signal_period'], 
                              adjust=False).mean()
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (macd > signal_line).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/momentum_stratey.py
# Type: py

# File: components/strategy_management_module/strategies/momentum_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MomentumStrategy(StrategyBase):
    """Simple Momentum Strategy."""

    default_params = {
        'lookback_period': 20,
        'threshold': 0
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        lookback_period = self.params.get('lookback_period')
        threshold = self.params.get('threshold')

        if not isinstance(lookback_period, int) or lookback_period <= 0:
            raise ValueError("lookback_period must be a positive integer")
        if not isinstance(threshold, (int, float)):
            raise ValueError("threshold must be a number")

    def generate_signals(self, data):
        """Generate trading signals."""
        momentum = data['close'].pct_change(periods=self.params['lookback_period'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (momentum > self.params['threshold']).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/moving_average_crossover.py
# Type: py

# File: components/strategy_management_module/strategies/moving_average_crossover.py
"""
Changes:
- Added proper type hints
- Improved validation
- Added logging
- Added signal generation error handling
"""
import logging
import pandas as pd
import numpy as np
from typing import Dict
from .strategy_base import StrategyBase

class MovingAverageCrossoverStrategy(StrategyBase):
    """Moving Average Crossover trading strategy."""

    default_params = {
        'short_window': 40,
        'long_window': 100
    }

    def __init__(self, params: Dict = None):
        self.logger = logging.getLogger(__name__)
        super().__init__(params or self.default_params)

    def validate_params(self) -> None:
        """Validate strategy parameters."""
        short_window = self.params.get('short_window')
        long_window = self.params.get('long_window')

        if not all(isinstance(x, int) and x > 0 
                  for x in [short_window, long_window]):
            raise ValueError("Windows must be positive integers")
        if short_window >= long_window:
            raise ValueError("short_window must be less than long_window")

    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """Generate trading signals based on moving average crossover."""
        try:
            signals = pd.DataFrame(index=data.index)
            signals['signal'] = 0.0

            # Calculate moving averages
            signals['short_mavg'] = data['close'].rolling(
                window=self.params['short_window'], 
                min_periods=1).mean()
            signals['long_mavg'] = data['close'].rolling(
                window=self.params['long_window'], 
                min_periods=1).mean()

            # Generate signals using loc to avoid chained assignment warning
            signals.loc[signals.index, 'signal'] = np.where(
                signals['short_mavg'] > signals['long_mavg'], 1.0, 0.0)
            signals['positions'] = signals['signal'].diff()

            return signals
        except Exception as e:
            self.logger.error(f"Error generating signals: {e}")
            raise

# File: components/strategy_management_module/strategies/rsi_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/rsi_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class RSIStrategy(StrategyBase):
    """Relative Strength Index (RSI) Strategy."""

    default_params = {
        'period': 14,
        'overbought': 70,
        'oversold': 30
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        period = self.params.get('period')
        overbought = self.params.get('overbought')
        oversold = self.params.get('oversold')

        if not isinstance(period, int) or period <= 0:
            raise ValueError("period must be a positive integer")
        if not (0 < oversold < overbought < 100):
            raise ValueError("Invalid overbought/oversold levels")

    def generate_signals(self, data):
        """Generate trading signals."""
        delta = data['close'].diff()
        gain = delta.where(delta > 0, 0).fillna(0)
        loss = (-delta.where(delta < 0, 0)).fillna(0)
        
        avg_gain = gain.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        avg_loss = loss.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))

        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals.loc[rsi > self.params['overbought'], 'signal'] = -1.0  # Fixed chained assignment
        signals.loc[rsi < self.params['oversold'], 'signal'] = 1.0     # Fixed chained assignment
        signals['positions'] = signals['signal'].diff()

        return signals

# File: components/strategy_management_module/strategies/strategy_base.py
# Type: py

# File: components/strategy_management_module/strategies/strategy_base.py
from abc import ABC, abstractmethod
from typing import Dict
import pandas as pd

class StrategyBase(ABC):
    """Base class for all trading strategies."""

    def __init__(self, params: Dict):
        """
        Initialize strategy with parameters.
        
        Args:
            params: Strategy parameters
        """
        self.params = params
        self.validate_params()

    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals from market data.
        
        Args:
            data: Market data with OHLCV columns
            
        Returns:
            DataFrame with trading signals
        """
        pass

    @abstractmethod
    def validate_params(self) -> None:
        """
        Validate strategy parameters.
        
        Raises:
            ValueError: If parameters are invalid
        """
        pass


