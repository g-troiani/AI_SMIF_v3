# Module: integration_communication_module

# File: components/integration_communication_module/__init__.py
# Type: py



# File: components/integration_communication_module/config.py
# Type: py



# File: components/integration_communication_module/credentials_manager.py
# Type: py

# components/integration_communication_module/credentials_manager.py

class CredentialsManager:
    def __init__(self, config):
        self._config = config

    def get_alpaca_credentials(self):
        if not self._config.ALPACA_API_KEY or not self._config.ALPACA_SECRET_KEY:
            raise ValueError("Alpaca API credentials are not set.")
        return {
            'api_key': self._config.ALPACA_API_KEY,
            'secret_key': self._config.ALPACA_SECRET_KEY,
            'base_url': self._config.ALPACA_BASE_URL
        }

    def get_zeromq_port(self):
        return self._config.ZEROMQ_PORT


# File: components/integration_communication_module/data_abstraction_layer.py
# Type: py



# File: components/integration_communication_module/live_data_integration.py
# Type: py

import threading
import queue
import json
import time
from datetime import datetime
import backtrader as bt
import websocket

class AlpacaWebSocketClient:
    """
    Connects to Alpaca's data streaming API to receive real-time bars for a given symbol.
    """
    def __init__(self, api_key, api_secret, symbol, endpoint="wss://stream.data.alpaca.markets/v2/iex"):
        self.api_key = api_key
        self.api_secret = api_secret
        self.symbol = symbol
        self.endpoint = endpoint
        self.ws = None
        self.thread = None
        self.data_queue = queue.Queue()
        self.connected = False
        self.authenticated = False

    def _on_open(self, ws):
        # Send auth message
        auth_msg = {
            "action": "auth",
            "key": self.api_key,
            "secret": self.api_secret
        }
        ws.send(json.dumps(auth_msg))
        print("Auth message sent. Waiting for authentication response...")

    def _on_message(self, ws, message):
        msg = json.loads(message)
        for m in msg:
            T = m.get('T')
            
            if T == 'error':
                code = m.get('code')
                err_msg = m.get('msg', 'Unknown error')
                print(f"WebSocket Error: code={code}, message={err_msg}")
                self.ws.close()
                return
            
            if T == 'success':
                # Check for authentication success
                if m.get('msg') == 'authenticated':
                    self.authenticated = True
                    print("Successfully authenticated.")
                    # Subscribe to bars now
                    sub_msg = {
                        "action": "subscribe",
                        "bars": [self.symbol]
                    }
                    ws.send(json.dumps(sub_msg))
                    self.connected = True
                    print(f"Subscribed to {self.symbol} bars.")

            if T == 'subscription':
                print(f"Subscription message: {m}")

            if T == 'b' and m.get('S') == self.symbol:
                bar = {
                    'open': m['o'],
                    'high': m['h'],
                    'low': m['l'],
                    'close': m['c'],
                    'volume': m['v'],
                    'timestamp': m['t']
                }
                self.data_queue.put(bar)

    def _on_error(self, ws, error):
        print("WebSocket Error:", error)

    def _on_close(self, ws, close_status_code, close_msg):
        self.connected = False
        print(f"WebSocket closed: code={close_status_code}, message={close_msg}")

    def start(self):
        self.ws = websocket.WebSocketApp(
            self.endpoint,
            on_message=self._on_message,
            on_open=self._on_open,
            on_error=self._on_error,
            on_close=self._on_close
        )
        self.thread = threading.Thread(target=self.ws.run_forever, daemon=True)
        self.thread.start()

        # Wait for auth and subscription
        for _ in range(10):
            if self.connected and self.authenticated:
                break
            time.sleep(1)
        if not (self.connected and self.authenticated):
            print("Unable to authenticate or subscribe to data. Check your API keys or subscription.")
            self.stop()
            raise RuntimeError("WebSocket authentication/subscription failed.")

    def stop(self):
        if self.ws:
            self.ws.close()
        if self.thread and self.thread.is_alive():
            self.thread.join()

    def get_queue(self):
        return self.data_queue

class AlpacaLiveDataFeed(bt.feed.DataBase):
    """
    Custom Backtrader DataFeed for live data from Alpaca via a queue.
    """

    def __init__(self, data_queue):
        super().__init__()
        self.data_queue = data_queue
        self.first_bar = True
        self.live = True  # Mark this data feed as live

    def _load(self):
        # Try to get a bar within a short timeout (e.g., 2 seconds)
        # If no bar arrives, return False (no new data but feed still alive)
        try:
            bar = self.data_queue.get(timeout=2)
        except queue.Empty:
            # No bar arrived in 2 seconds. Return False to indicate
            # no data now, but weâ€™re still live and waiting for future bars.
            return False

        # If we got here, we have a bar
        dt = datetime.fromisoformat(bar['timestamp'].replace("Z", "+00:00"))
        self.lines.datetime[0] = bt.date2num(dt)
        self.lines.open[0] = bar['open']
        self.lines.high[0] = bar['high']
        self.lines.low[0] = bar['low']
        self.lines.close[0] = bar['close']
        self.lines.volume[0] = bar['volume']
        self.lines.openinterest[0] = 0

        if self.first_bar:
            print("Received first bar, live data started.")
            self.first_bar = False

        return True  # Indicate we loaded a new bar


def setup_live_data_cerebro(api_key, api_secret, symbol, strategy, strategy_params=None):
    """
    Sets up Backtrader to run a live strategy using Alpaca's WebSocket data feed.
    """
    if strategy_params is None:
        strategy_params = {}

    # Start the WebSocket client
    ws_client = AlpacaWebSocketClient(api_key, api_secret, symbol)
    ws_client.start()
    data_queue = ws_client.get_queue()

    # Create Backtrader Cerebro
    cerebro = bt.Cerebro()

    # Disable runonce optimization so we process bars as they come
    cerebro.run(runonce=False)

    # Create and add the live data feed
    data_feed = AlpacaLiveDataFeed(data_queue=data_queue)
    data_feed._name = symbol
    data_feed.live = True
    cerebro.adddata(data_feed)

    # Add the user-defined strategy
    cerebro.addstrategy(strategy, **strategy_params)

    return cerebro, ws_client


# File: components/integration_communication_module/logger.py
# Type: py

# components/integration_communication_module/logger.py

# components/integration_communication_module/logger.py

import logging
import os

# Ensure the logs directory exists
if not os.path.exists('logs'):
    os.makedirs('logs')

# Create a custom logger
logger = logging.getLogger('integration_communication_module')
logger.setLevel(logging.DEBUG)

# Create handlers
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler('logs/integration_communication_module.log')

c_handler.setLevel(logging.INFO)
f_handler.setLevel(logging.WARNING)

# Create formatters and add them to handlers
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger if they haven't been added already
if not logger.handlers:
    logger.addHandler(c_handler)
    logger.addHandler(f_handler)


# File: components/integration_communication_module/models.py
# Type: py

# components/integration_communication_module/models.py

from dataclasses import dataclass

@dataclass
class MarketData:
    symbol: str
    timestamp: str
    open: float
    high: float
    low: float
    close: float
    volume: int

@dataclass
class Order:
    id: str
    symbol: str
    qty: int
    side: str
    type: str
    time_in_force: str
    status: str


# File: components/integration_communication_module/service_factory.py
# Type: py

# components/integration_communication_module/service_factory.py

from .api_clients.alpaca_client import AlpacaClient
from .credentials_manager import CredentialsManager
from .config import Config

class ServiceFactory:
    @staticmethod
    def get_data_service(service_name):
        if service_name == 'alpaca':
            credentials_manager = CredentialsManager(Config())
            return AlpacaClient(credentials_manager)
        else:
            raise ValueError(f"Unknown data service: {service_name}")

    @staticmethod
    def get_trade_service(service_name):
        if service_name == 'alpaca':
            credentials_manager = CredentialsManager(Config())
            return AlpacaClient(credentials_manager)
        else:
            raise ValueError(f"Unknown trade service: {service_name}")


# File: components/integration_communication_module/trade_abstraction_layer.py
# Type: py



# File: components/integration_communication_module/api_clients/__init__.py
# Type: py

# components/integration_communication_module/api_clients/__init__.py

# This file can be left empty or used to initialize the submodule.


# File: components/integration_communication_module/api_clients/alpaca_client.py
# Type: py

# components/integration_communication_module/api_clients/alpaca_client.py

import alpaca_trade_api as tradeapi
from ..logger import logger
from .base_data_service import BaseDataService
from .base_trade_service import BaseTradeService
from ..models import MarketData, Order

class AlpacaClient(BaseDataService, BaseTradeService):
    def __init__(self, credentials_manager):
        creds = credentials_manager.get_alpaca_credentials()
        self.api = tradeapi.REST(
            key_id=creds['api_key'],
            secret_key=creds['secret_key'],
            base_url=creds['base_url']
        )
        logger.info("AlpacaClient initialized.")

    def get_account(self):
        try:
            account = self.api.get_account()
            logger.info("Account retrieved successfully.")
            return account
        except Exception as e:
            logger.error(f"Error retrieving account: {e}")
            raise

    def get_market_data(self, symbol, timeframe, start, end):
        try:
            barset = self.api.get_barset(symbol, timeframe, start=start, end=end)
            bars = barset[symbol]
            logger.info(f"Market data for {symbol} retrieved successfully.")
            # Convert to MarketData instances
            market_data = []
            for bar in bars:
                market_data.append(MarketData(
                    symbol=symbol,
                    timestamp=bar.t.isoformat(),
                    open=bar.o,
                    high=bar.h,
                    low=bar.l,
                    close=bar.c,
                    volume=bar.v
                ))
            return market_data
        except Exception as e:
            logger.error(f"Error retrieving market data for {symbol}: {e}")
            raise

    def place_order(self, symbol, qty, side, type, time_in_force):
        try:
            order = self.api.submit_order(
                symbol=symbol,
                qty=qty,
                side=side,
                type=type,
                time_in_force=time_in_force
            )
            logger.info(f"Order placed successfully: {order.id}")
            return Order(
                id=order.id,
                symbol=order.symbol,
                qty=order.qty,
                side=order.side,
                type=order.type,
                time_in_force=order.time_in_force,
                status=order.status
            )
        except Exception as e:
            logger.error(f"Error placing order for {symbol}: {e}")
            raise


# File: components/integration_communication_module/api_clients/base_data_service.py
# Type: py

# components/integration_communication_module/api_clients/base_data_service.py

from abc import ABC, abstractmethod

class BaseDataService(ABC):
    @abstractmethod
    def get_market_data(self, symbol, timeframe, start, end):
        pass


# File: components/integration_communication_module/api_clients/base_trade_service.py
# Type: py

# components/integration_communication_module/api_clients/base_trade_service.py

from abc import ABC, abstractmethod

class BaseTradeService(ABC):
    @abstractmethod
    def place_order(self, symbol, qty, side, type, time_in_force):
        pass

    @abstractmethod
    def get_account(self):
        pass


# File: components/integration_communication_module/api_clients/zeromq_client.py
# Type: py

# components/integration_communication_module/api_clients/zeromq_client.py

import zmq
from ..config import Config
from ..logger import logger

class ZeroMQClient:
    def __init__(self):
        self.context = zmq.Context()
        self.publisher = self.context.socket(zmq.PUB)
        self.port = Config.ZEROMQ_PORT
        self.publisher.bind(f"tcp://*:{self.port}")
        logger.info(f"ZeroMQ publisher bound to port {self.port}.")

    def publish(self, topic, message):
        try:
            self.publisher.send_multipart([topic.encode(), message.encode()])
            logger.debug(f"Published message on topic '{topic}'.")
        except Exception as e:
            logger.error(f"Error publishing message: {e}")
            raise

    def close(self):
        self.publisher.close()
        self.context.term()
        logger.info("ZeroMQ publisher closed.")


# File: components/integration_communication_module/api_clients/zeromq_subscriber.py
# Type: py

# components/integration_communication_module/api_clients/zeromq_subscriber.py

import zmq
from ..config import Config
from ..logger import logger

class ZeroMQSubscriber:
    def __init__(self):
        self.context = zmq.Context()
        self.subscriber = self.context.socket(zmq.SUB)
        self.port = Config.ZEROMQ_PORT
        self.subscriber.connect(f"tcp://localhost:{self.port}")
        logger.info(f"ZeroMQ subscriber connected to port {self.port}.")

    def subscribe(self, topic):
        self.subscriber.setsockopt_string(zmq.SUBSCRIBE, topic)
        logger.debug(f"Subscribed to topic '{topic}'.")

    def receive(self):
        try:
            topic, message = self.subscriber.recv_multipart()
            logger.debug(f"Received message on topic '{topic.decode()}'.")
            return topic.decode(), message.decode()
        except Exception as e:
            logger.error(f"Error receiving message: {e}")
            raise

    def close(self):
        self.subscriber.close()
        self.context.term()
        logger.info("ZeroMQ subscriber closed.")


